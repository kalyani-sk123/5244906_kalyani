-----------------------------------------------------------------------------WEEK 1------------------------------------------
**PLUS MINUS
CODE:

#include <stdio.h>

void plusMinus(int arr[], int n) {
    int pos_count = 0, neg_count = 0, zero_count = 0;

    for (int i = 0; i < n; i++) {
        if (arr[i] > 0) {
            pos_count++;
        } else if (arr[i] < 0) {
            neg_count++;
        } else {
            zero_count++;
        }
    }

    
    printf("%.6f\n", (float)pos_count / n);
    printf("%.6f\n", (float)neg_count / n);
    printf("%.6f\n", (float)zero_count / n);
}

int main() {
    int n;
    
    
    scanf("%d", &n);

    int arr[n];

   
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    
    plusMinus(arr, n);

    return 0;
}
-----------------------------------------------------------------------------------------
**MIN MAX
CODE:

#include <stdio.h>
#include <limits.h>

int main() {
    long arr[5];
    long total = 0;
    long min = LONG_MAX;
    long max = LONG_MIN;

   
    for (int i = 0; i < 5; i++) {
        scanf("%ld", &arr[i]);
        total += arr[i];
        if (arr[i] < min) min = arr[i];
        if (arr[i] > max) max = arr[i];
    }

    long min_sum = total - max;
    long max_sum = total - min;

    printf("%ld %ld\n", min_sum, max_sum);

    return 0;
}
-------------------------------------------------------------------------------------------
**TIME CONVERSION
CODE:

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char* timeConversion(char* s) {
    static char result[9];
    int hour = (s[0] - '0') * 10 + (s[1] - '0');

    if (s[8] == 'A') {
        if (hour == 12)
            hour = 0;
    } else {
        if (hour != 12)
            hour += 12;
    }

     sprintf(result, "%02d:%c%c:%c%c", hour, s[3], s[4], s[6], s[7]);

    return result;
}

int main() {
    char s[11];
    scanf("%s", s);

    char* result = timeConversion(s);
    printf("%s\n", result);

    return 0;
}
-------------------------------------------------------------------------------------------
**SPARSE ARRAY
CODE:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    int n, q;
    scanf("%d", &n);

    
    char **strings = malloc(n * sizeof(char*));
    for (int i = 0; i < n; i++) {
        strings[i] = malloc(101); 
        scanf("%s", strings[i]);
    }

    scanf("%d", &q);

    
    char **queries = malloc(q * sizeof(char*));
    for (int i = 0; i < q; i++) {
        queries[i] = malloc(101);
        scanf("%s", queries[i]);
    }

    
    for (int i = 0; i < q; i++) {
        int count = 0;
        for (int j = 0; j < n; j++) {
            if (strcmp(queries[i], strings[j]) == 0) {
                count++;
            }
        }
        printf("%d\n", count);
    }

    for (int i = 0; i < n; i++) {
        free(strings[i]);
    }
    free(strings);

    for (int i = 0; i < q; i++) {
        free(queries[i]);
    }
    free(queries);

    return 0;
}
-------------------------------------------------------------------------------------------
**LONELY INTEGER
CODE:

#include <stdio.h>
int main() {
    int n;
    scanf("%d", &n);  

    int result = 0, num;

    for (int i = 0; i < n; i++) {
        scanf("%d", &num);
        result ^= num; 
    }

    printf("%d\n", result);  

    return 0;
}
-------------------------------------------------------------------------------------------
**FLIPPING BITS
CODE:

#include <stdio.h>
unsigned int flippingBits(unsigned int n) {
    return ~n;  
}

int main() {
    int q;
    scanf("%d", &q);  
    for (int i = 0; i < q; i++) {
        unsigned int n;
        scanf("%u", &n);  
        unsigned int result = flippingBits(n);
        printf("%u\n", result);
    }

    return 0;
}
------------------------------------------------------------------------------------------
**DIAGONAL DIFFERENCE
CODE:

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    scanf("%d", &n);

    int matrix[n][n];
    int primaryDiagonal = 0, secondaryDiagonal = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
            if (i == j)
                primaryDiagonal += matrix[i][j];
            if (i + j == n - 1)
                secondaryDiagonal += matrix[i][j];
        }
    }
------------------------------------------------------------------------------------------
**COUNTING SORT
CODE:

#include <stdio.h>
int main() {
    int n;
    scanf("%d", &n);

    int count[100] = {0};
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        count[value]++;  
    }

    for (int i = 0; i < 100; i++) {
        printf("%d", count[i]);
        if (i < 99) printf(" ");
    }

    printf("\n");
    return 0;
}
-------------------------------------------------------------------------------------------**PANGRAMS
CODE:

#include <stdio.h>
int main() {
    int n;
    scanf("%d", &n);

    int count[100] = {0};
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        count[value]++;  
    }

    for (int i = 0; i < 100; i++) {
        printf("%d", count[i]);
        if (i < 99) printf(" ");
    }

    printf("\n");
    return 0;
}
-------------------------------------------------------------------------------------------**PERMUTIG
 CODE:

#include <stdio.h>
int main() {
    int n;
    scanf("%d", &n);

    int count[100] = {0};
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        count[value]++;  
    }

    for (int i = 0; i < 100; i++) {
        printf("%d", count[i]);
        if (i < 99) printf(" ");
    }

    printf("\n");
    return 0;
}
-------------------------------------------------------------------------------------------
**SUBARRAY
CODE:

#include <stdio.h>
int main() {
    int n;
    scanf("%d", &n);

    int s[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &s[i]);
    }

    int d, m;
    scanf("%d %d", &d, &m);

    int count = 0;

    for (int i = 0; i <= n - m; i++) {
        int sum = 0;
        for (int j = i; j < i + m; j++) {
            sum += s[j];
        }
        if (sum == d) {
            count++;
        }
    }

    printf("%d\n", count);

    return 0;
}
-------------------------------------------------------------------------------------------













